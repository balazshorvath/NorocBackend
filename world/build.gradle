apply plugin: 'java'

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

// Methods to determine the operating system (OS) and architecture (Arch) of the system.
// These strings are used to determine the classifier of the artifact that contains the
// native libaries. For example, when the operating system is "windows" and the 
// architecture is "x86_64", then the classifier will be "windows-x86_64", and thus,
// the JAR file containing the native libraries will be
// jcuda-natives-windows-x86_64-0.9.2.jar
// These methods are taken from 
// https://github.com/jcuda/jcuda/blob/master/JCudaJava/src/main/java/jcuda/LibUtils.java
def static getOsString() {
    String vendor = System.getProperty("java.vendor");
    if ("The Android Project" == vendor) {
        return "android";
    } else {
        String osName = System.getProperty("os.name");
        osName = osName.toLowerCase(Locale.ENGLISH);
        if (osName.startsWith("windows")) {
            return "windows";
        } else if (osName.startsWith("mac os")) {
            return "apple";
        } else if (osName.startsWith("linux")) {
            return "linux";
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch");
    osArch = osArch.toLowerCase(Locale.ENGLISH);
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86";
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64";
    } else if (osArch.startsWith("arm64")) {
        return "arm64";
    } else if (osArch.startsWith("arm")) {
        return "arm";
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc";
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64";
    } else if (osArch.startsWith("sparc")) {
        return "sparc";
    } else if (osArch.startsWith("mips64")) {
        return "mips64";
    } else if (osArch.startsWith("mips")) {
        return "mips";
    } else if (osArch.contains("risc")) {
        return "risc";
    }
    return "unknown";
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'

    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'net.jodah:typetools:0.4.0'
    compile 'org.mongodb:mongo-java-driver:3.0.4'
    compile 'org.mongojack:mongojack:2.6.0'
    compile 'org.jcuda:jcuda:0.9.2'

    compile fileTree(include: ['*.jar'], dir: 'libs')

    def classifier = getOsString() + "-" + getArchString()

    // Set JCuda version here, or if multiple modules use JCuda, 
    // you should set a global variable like so:
    //
    // ext {
    //  jCudaVersion = "0.9.2"
    // }
    //
    // In your *top level* build gradle, and use
    // rootProject.ext.jCudaVersion instead of jCudaVersion when you need to access it

    def jCudaVersion = "0.9.2"

    // JCuda Java libraries

    compile(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcufft', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcurand', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcusolver', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jnvgraph', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcudnn', version: jCudaVersion) {
        transitive = false
    }

    // JCuda native libraries

    compile group: 'org.jcuda', name: 'jcuda-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcublas-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcufft-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcusparse-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcurand-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcusolver-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jnvgraph-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcudnn-natives',
            classifier: classifier, version: jCudaVersion
}